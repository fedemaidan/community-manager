<?php

namespace CM\Bundle\ModelBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TagRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TagRepository extends EntityRepository
{

	public function getByName($name) {
        try {
            $conn = $this->getEntityManager()->getConnection();
            $query = "SELECT name FROM tag t WHERE t.name like :name";
            $stmt = $conn->executeQuery($query, array(':name' => '%'.$name.'%'));
            $stmt->setFetchMode(\PDO::FETCH_COLUMN, 0);
        } catch(\PDOException $e) {
            $conn->rollBack();
        }
        $result = $stmt->fetchAll();
        return $result != null ? $result : array();
    }

    public function getByNames($tags) {
        $conn = $this->getEntityManager()->getConnection();
        $params = array_fill(0, count($tags), '?');
        $params = implode(',',$params);
        $query = "SELECT id FROM tag t WHERE t.name IN ({$params})";
        $stmt = $conn->prepare($query);
        foreach($tags as $key => $value) {
            $stmt->bindValue($key+1, $value);
        }
        $stmt->setFetchMode(\PDO::FETCH_COLUMN, 0);
        $stmt->execute();
        $result = $stmt->fetchAll();
        return $result != null ? $result : array();
	}

    public function getByConversation($conversation_id) {
        try {
            $conn = $this->getEntityManager()->getConnection();
            $query = "SELECT t.name FROM tag t inner join conversation_tag ct on t.id = ct.tag_id WHERE ct.conversation_id = :conversation_id";
            $stmt = $conn->executeQuery($query, array(':conversation_id' => $conversation_id));
            $stmt->setFetchMode(\PDO::FETCH_COLUMN, 0);
        } catch(\PDOException $e) {
            $conn->rollBack();
        }
        $result = $stmt->fetchAll();
        return $result != null ? $result : array();
    }
	
    public function getByPost($post_id) {
    	try {
    		$conn = $this->getEntityManager()->getConnection();
    		$query = "SELECT t.name FROM tag t inner join post_tag pt on t.id = pt.tag_id WHERE pt.post_id = :post_id";
    		$stmt = $conn->executeQuery($query,array(':post_id' => $post_id));
    		$stmt->setFetchMode(\PDO::FETCH_COLUMN, 0);
    	}
    	catch (\PDOException $e) {
    		$conn->rollBack();
    	}
    	
    	$result = $stmt->fetchAll();
    	return $result != null ? $result : array();
    	
    }
    public function insertTags($taggeableEntity, $tags) {
        $entity_name = $taggeableEntity->getTableName();
        $id = $taggeableEntity->getId();

        try {
                $conn = $this->getEntityManager()->getConnection();
                $conn->beginTransaction();

                foreach ($tags as $name) {
                    $query = "INSERT IGNORE INTO tag set name = :name";
                    $stmt = $conn->prepare($query);
                    $stmt->bindParam(':name', $name);
                    $stmt->execute();
                }

                $tags_id = $this->getByNames($tags);

                $query = "DELETE FROM {$entity_name}_tag WHERE {$entity_name}_id = :id";
                $stmt = $conn->prepare($query);
                $stmt->bindParam(':id', $id);
                $stmt->execute();

                foreach ($tags_id as $tag_id) {
                    $query = "INSERT INTO {$entity_name}_tag SET {$entity_name}_id = :id, tag_id = :tag_id";
                    $stmt = $conn->prepare($query);
                    $stmt->bindParam(':id', $id);
                    $stmt->bindParam(':tag_id', $tag_id);
                    $stmt->execute();
                }

                $conn->commit();
            } catch(\PDOException $e) {
                $conn->rollBack();
            }
    }
	
}
