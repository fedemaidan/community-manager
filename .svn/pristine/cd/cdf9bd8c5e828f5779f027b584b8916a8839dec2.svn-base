<?php

namespace CM\Bundle\ModelBundle\Entity;

use Doctrine\ORM\EntityRepository;
use CM\Bundle\ModelBundle\Entity\FanPage;

/**
 * ConversationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConversationRepository extends EntityRepository
{
	public function findByFanPage($fanPage, $updated_time = null, $limit) {

		$query = $this->createQueryBuilder('c');
		$query->select('c');
		$query->where('c.fan_page = ?1');
		if($updated_time) {
			$query->andWhere('c.updated_time < ?2');
			$query->setParameter(2, $updated_time);
		}
		$query->orderBy('c.updated_time', 'DESC');

    	$query->setMaxResults( $limit );
		$query->setParameter(1, $fanPage);

		$results = $query->getQuery()->getResult();
		return $results;
	}
	
	public function getFBIdsPeople($ids, $calificaciones){
		$conn = $this->getEntityManager()->getConnection();
		
		$my_ids = explode(', ', $ids);
		$paramsID = array_fill(0, count($my_ids), '?');
		$paramsID = implode(',', $paramsID);
			
		$condicionCalificacion = "";
		if ($calificaciones != null) {
		$primera = true;
		foreach ($calificaciones as $calificacion) {
			if ($primera) {
				$condicionCalificacion = "AND ( calificacion = ".$calificacion;
				$primera = false;
			}
			else {
				$condicionCalificacion .= " OR calificacion = ".$calificacion;
			}
		}
		if($condicionCalificacion != "") $condicionCalificacion .= ")";   
		}
		$query = "select distinct(participants) from conversation where id in ({$paramsID}) {$condicionCalificacion}";
	
		$consulta = $conn->prepare($query);
		foreach($my_ids as $key => $id) {
			$consulta->bindValue($key+1,$id);
		}

		$consulta->execute();
		
		return $consulta->fetchAll();
	}

	public function updateConversationPlano($id, $messages, $primero) {
		
		$conn = $this->getEntityManager()->getConnection();
		$messages = str_replace("'", "\'", $messages);
		if ($primero)
			$query = "update conversation set messages = '".$messages."' where id = ".$id;
		else
			$query = "update conversation set messages = concat(messages, '".$messages."') where id= ". $id;
		
		$consulta = $conn->prepare($query);
		
		
		$consulta->execute();
		

		return 1;
	}
}
